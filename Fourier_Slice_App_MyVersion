classdef Final_Fourier_Slice < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure    matlab.ui.Figure
        UIAxes      matlab.ui.control.UIAxes
        UIAxes_2    matlab.ui.control.UIAxes
        UIAxes_3    matlab.ui.control.UIAxes
        UIAxes_4    matlab.ui.control.UIAxes
        UIAxes_5    matlab.ui.control.UIAxes
        NextButton  matlab.ui.control.Button
    end


    properties (Access = public)
        angle % Description
        %im_rot
    end


    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app, angle)
            app.angle = 0;
            
            ax = app.UIAxes;
            ctstack = load('stack2.mat');
            slice = 50;
            %subplot(3,2,1)
            ctstack = ctstack.stack2;
            im = ctstack(:,:,slice);
            im_rot = imrotate(im, app.angle);
            s = size(im_rot); dx = round((400-s(1))/2); dy = round((400-s(2))/2);
            im_rot_pad =  padarray(im_rot, [dx dy], 'both');           
            imshow(im_rot_pad./max(im_rot_pad(:)), 'Parent', app.UIAxes)
            title(ax,['Original Slice, \theta = ' num2str(app.angle)])
            hold(ax,'on')
            line(ax, [1 size(im_rot_pad,1)], [size(im_rot_pad,2)-20 size(im_rot_pad,2)-20], 'Linewidth', 3, 'Color', 'g');
            
            % Panel 2:
            % next take the 2D fourier transform. shift.
            ax2 = app.UIAxes_2;
            ft_im = fft2(im);
            ft_imrot = imrotate(fftshift(ft_im), app.angle);
            s2 = size(ft_imrot); dx2 = round((400-s2(1))/2); dy2 = round((400-s2(2))/2);
            ft_imrot_pad =  padarray(ft_imrot, [dx2 dy2], 'both');  
            %subplot(3,2,2)
            %m = abs(ft_imrot_pad);
            %imshow(m./max(m(:)), 'Parent', app.UIAxes_2)
            m = log10(abs(ft_imrot_pad));
            imshow(m./max(m(:)), 'Parent', app.UIAxes_2)
            title(ax2, 'Shifted 2D Fourier Transform')
           
            
            % Panel 3: Map the projection
            %take a summation of each column, post-rotation.
            im_proj = sum(im_rot_pad,1); %sum the original image
            pixel = 1:1:length(im_proj);
            %subplot(3,2,3)
            %pixel = 1:1:400;
            ax3 = app.UIAxes_3;
            plot(pixel,im_proj, 'Parent', app.UIAxes_3, 'Color', 'g')
            title(ax3, ['Projection of the Slice at \theta = ' num2str(app.angle)])
            xlabel(ax3, 'Pixel')
            ylabel(ax3, 'Relative Pixel Intensity')
            xlim(ax3, [1 length(pixel)])
            ylim(ax3, [1 3e4])
            
            %Panel 5: Take the 1D Fourier Transfor of the Projection
            ax4 = app.UIAxes_4;
            ft_proj =fft(im_proj);
            %subplot(3,2,5)
            ft_projshift = fftshift(ft_proj);
            plot(pixel, abs(ft_projshift), 'Parent', app.UIAxes_4, 'Color', 'g')
            xlim(ax4, [0 400])
            ylim(ax4, [-5e5 3e6])
            title(ax4, '1D FT of the Projection')
            
            %Panel 6: Cross section of the 2D Fourier Transform
            ax5 = app.UIAxes_5;
            maximum = max(ft_imrot_pad(:));
            [x,y]=find(ft_imrot_pad==maximum);
            %xsect_origin =  148; round(median(1:1:length(pixel))); %129;
            xsect = ft_imrot_pad;
            %subplot(3,2,6)
            xsect = xsect(x, :);
            %imshow(abs(ft_im), [])
            %n = size(xsect,1);
            plot(ax5, pixel, abs(xsect), 'Parent', app.UIAxes_5, 'Color', 'b')
            xlim(ax5, [0 400])
            ylim(ax5, [-5e5 3e6])
            title(ax5, 'Central Cross Section of 2D FT')
            drawnow;
            
            % now plot the cross section line across frame 2.
            hold(ax2,'on')
            line(ax2, [1 size(ft_imrot_pad,1)], [y y], 'Color','b'); 
            app.angle = 10;
        end

        % Button pushed function: NextButton
        function NextButtonPushed(app, event)
            
            % Panel 1:
            % first display the original CT slice.
            %angle = 170;
            ax = app.UIAxes;
            ctstack = load('stack2.mat');
            slice = 50;
            %subplot(3,2,1)
            ctstack = ctstack.stack2;
            im = ctstack(:,:,slice);
            im_rot = imrotate(im, app.angle);
            s = size(im_rot); dx = round((400-s(1))/2); dy = round((400-s(2))/2);
            im_rot_pad =  padarray(im_rot, [dx dy], 'both');           
            imshow(im_rot_pad./max(im_rot_pad(:)), 'Parent', app.UIAxes)
            title(ax,['Original Slice, \theta = ' num2str(app.angle)])
            hold(ax,'on')
            line(ax, [1 size(im_rot_pad,1)], [size(im_rot_pad,2)-20 size(im_rot_pad,2)-20], 'Linewidth', 3, 'Color', 'g');
            
            % Panel 2:
            % next take the 2D fourier transform. shift.
            ax2 = app.UIAxes_2;
            ft_im = fft2(im);
            ft_imrot = imrotate(fftshift(ft_im), app.angle);
            s2 = size(ft_imrot); dx2 = round((400-s2(1))/2); dy2 = round((400-s2(2))/2);
            ft_imrot_pad =  padarray(ft_imrot, [dx2 dy2], 'both');  
            %subplot(3,2,2)
            %m = abs(ft_imrot_pad);
            %imshow(m./max(m(:)), 'Parent', app.UIAxes_2)
            m = log10(abs(ft_imrot_pad));
            imshow(m./max(m(:)), 'Parent', app.UIAxes_2)
            title(ax2, 'Shifted 2D Fourier Transform')
           
            
            % Panel 3: Map the projection
            %take a summation of each column, post-rotation.
            im_proj = sum(im_rot_pad,1); %sum the original image
            pixel = 1:1:length(im_proj);
            %subplot(3,2,3)
            %pixel = 1:1:400;
            ax3 = app.UIAxes_3;
            plot(pixel,im_proj, 'Parent', app.UIAxes_3, 'Color', 'g')
            title(ax3, ['Projection of the Slice at \theta = ' num2str(app.angle)])
            xlabel(ax3, 'Pixel')
            ylabel(ax3, 'Relative Pixel Intensity')
            xlim(ax3, [1 length(pixel)])
            ylim(ax3, [1 3e4])
            
            %Panel 5: Take the 1D Fourier Transfor of the Projection
            ax4 = app.UIAxes_4;
            ft_proj =fft(im_proj);
            %subplot(3,2,5)
            ft_projshift = fftshift(ft_proj);
            plot(pixel, abs(ft_projshift), 'Parent', app.UIAxes_4, 'Color', 'g')
            xlim(ax4, [0 400])
            ylim(ax4, [-5e5 3e6])
            title(ax4, '1D Fourier Transform of the Projection')
            
            %Panel 6: Cross section of the 2D Fourier Transform
            ax5 = app.UIAxes_5;
            maximum = max(ft_imrot_pad(:));
            [x,y]=find(ft_imrot_pad==maximum);
            %xsect_origin =  148; round(median(1:1:length(pixel))); %129;
            xsect = ft_imrot_pad;
            %subplot(3,2,6)
            xsect = xsect(x, :);
            %imshow(abs(ft_im), [])
            %n = size(xsect,1);
            plot(ax5, pixel, abs(xsect), 'Parent', app.UIAxes_5, 'Color', 'b')
            xlim(ax5, [0 400])
            ylim(ax5, [-5e5 3e6])
            title(ax5, 'Cross Section: 2D Fourier Transform')
            drawnow;
            
            % now plot the cross section line across frame 2.
            hold(ax2,'on')
            line(ax2, [1 size(ft_imrot_pad,1)], [y y], 'Color','b'); 

            
            app.angle = app.angle + 10;
            if app.angle == 360
                app.angle = 0; %reset counter;
            end
            
        end
    end

    % App initialization and construction
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure
            app.UIFigure = uifigure;
            app.UIFigure.Position = [100 100 669 709];
            app.UIFigure.Name = 'UI Figure';

            % Create UIAxes
            app.UIAxes = uiaxes(app.UIFigure);
            app.UIAxes.Position = [68 495 255 215];

            % Create UIAxes_2
            app.UIAxes_2 = uiaxes(app.UIFigure);
            app.UIAxes_2.Position = [423 503 247 207];

            % Create UIAxes_3
            app.UIAxes_3 = uiaxes(app.UIFigure);
            app.UIAxes_3.Position = [1 248 322 215];

            % Create UIAxes_4
            app.UIAxes_4 = uiaxes(app.UIFigure);
            app.UIAxes_4.Position = [-1 1 326 215];

            % Create UIAxes_5
            app.UIAxes_5 = uiaxes(app.UIFigure);
            app.UIAxes_5.Position = [348 1 322 215];

            % Create NextButton
            app.NextButton = uibutton(app.UIFigure, 'push');
            app.NextButton.ButtonPushedFcn = createCallbackFcn(app, @NextButtonPushed, true);
            app.NextButton.Position = [457 344 100 22];
            app.NextButton.Text = 'Next';
        end
    end

    methods (Access = public)

        % Construct app
        function app = Final_Fourier_Slice(varargin)

            % Create and configure components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            % Execute the startup function
            runStartupFcn(app, @(app)startupFcn(app, varargin{:}))

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end
